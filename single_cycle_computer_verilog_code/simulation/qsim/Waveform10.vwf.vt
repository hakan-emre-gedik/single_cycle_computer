// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/07/2022 23:52:29"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          single_cycle_computer_controller
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module single_cycle_computer_controller_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg [31:0] FLAG_OUT;
reg [5:0] funct;
reg [1:0] op;
reg [1:0] shift_type;
// wires                                               
wire ALUShiftSelect;
wire ALUSrc;
wire [2:0] ALUop;
wire ExtControl;
wire MemWrite;
wire MemtoReg;
wire RegSrc;
wire RegWrite;
wire [1:0] ShiftSel;
wire flagUpdate;

// assign statements (if any)                          
single_cycle_computer_controller i1 (
// port map - connection between master ports and signals/registers   
	.ALUShiftSelect(ALUShiftSelect),
	.ALUSrc(ALUSrc),
	.ALUop(ALUop),
	.Clock(Clock),
	.ExtControl(ExtControl),
	.FLAG_OUT(FLAG_OUT),
	.MemWrite(MemWrite),
	.MemtoReg(MemtoReg),
	.RegSrc(RegSrc),
	.RegWrite(RegWrite),
	.ShiftSel(ShiftSel),
	.flagUpdate(flagUpdate),
	.funct(funct),
	.op(op),
	.shift_type(shift_type)
);
initial 
begin 
#1000000 $finish;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #10000 1'b1;
	#10000;
end 
// op[ 1 ]
initial
begin
	op[1] = 1'b0;
	op[1] = #20000 1'b1;
	op[1] = #20000 1'b0;
	op[1] = #20000 1'b1;
	op[1] = #20000 1'b0;
	op[1] = #20000 1'b1;
	op[1] = #60000 1'b0;
	op[1] = #60000 1'b1;
	op[1] = #20000 1'b0;
	op[1] = #40000 1'b1;
	op[1] = #60000 1'b0;
	op[1] = #20000 1'b1;
	op[1] = #60000 1'b0;
	op[1] = #20000 1'b1;
	op[1] = #40000 1'b0;
	op[1] = #20000 1'b1;
	op[1] = #60000 1'b0;
	op[1] = #20000 1'b1;
	op[1] = #40000 1'b0;
	op[1] = #20000 1'b1;
	op[1] = #40000 1'b0;
	op[1] = #40000 1'b1;
	op[1] = #60000 1'b0;
	op[1] = #20000 1'b1;
	op[1] = #20000 1'b0;
	op[1] = #40000 1'b1;
	op[1] = #20000 1'b0;
	op[1] = #20000 1'b1;
	op[1] = #20000 1'b0;
	op[1] = #20000 1'b1;
end 
// op[ 0 ]
initial
begin
	op[0] = 1'b1;
	op[0] = #40000 1'b0;
	op[0] = #80000 1'b1;
	op[0] = #20000 1'b0;
	op[0] = #160000 1'b1;
	op[0] = #80000 1'b0;
	op[0] = #20000 1'b1;
	op[0] = #40000 1'b0;
	op[0] = #80000 1'b1;
	op[0] = #20000 1'b0;
	op[0] = #60000 1'b1;
	op[0] = #20000 1'b0;
	op[0] = #40000 1'b1;
	op[0] = #40000 1'b0;
	op[0] = #20000 1'b1;
	op[0] = #20000 1'b0;
	op[0] = #80000 1'b1;
	op[0] = #20000 1'b0;
	op[0] = #60000 1'b1;
	op[0] = #80000 1'b0;
end 
// funct[ 5 ]
initial
begin
	funct[5] = 1'b1;
	funct[5] = #20000 1'b0;
	funct[5] = #40000 1'b1;
	funct[5] = #40000 1'b0;
	funct[5] = #60000 1'b1;
	funct[5] = #100000 1'b0;
	funct[5] = #20000 1'b1;
	funct[5] = #20000 1'b0;
	funct[5] = #20000 1'b1;
	funct[5] = #60000 1'b0;
	funct[5] = #60000 1'b1;
	funct[5] = #40000 1'b0;
	funct[5] = #20000 1'b1;
	funct[5] = #20000 1'b0;
	funct[5] = #20000 1'b1;
	funct[5] = #60000 1'b0;
	funct[5] = #20000 1'b1;
	funct[5] = #60000 1'b0;
	funct[5] = #20000 1'b1;
	funct[5] = #20000 1'b0;
	funct[5] = #40000 1'b1;
	funct[5] = #20000 1'b0;
	funct[5] = #80000 1'b1;
	funct[5] = #40000 1'b0;
	funct[5] = #40000 1'b1;
	funct[5] = #40000 1'b0;
end 
// funct[ 4 ]
initial
begin
	funct[4] = 1'b0;
	funct[4] = #20000 1'b1;
	funct[4] = #120000 1'b0;
	funct[4] = #60000 1'b1;
	funct[4] = #60000 1'b0;
	funct[4] = #60000 1'b1;
	funct[4] = #20000 1'b0;
	funct[4] = #20000 1'b1;
	funct[4] = #20000 1'b0;
	funct[4] = #40000 1'b1;
	funct[4] = #20000 1'b0;
	funct[4] = #20000 1'b1;
	funct[4] = #100000 1'b0;
	funct[4] = #20000 1'b1;
	funct[4] = #20000 1'b0;
	funct[4] = #20000 1'b1;
	funct[4] = #40000 1'b0;
	funct[4] = #20000 1'b1;
	funct[4] = #20000 1'b0;
	funct[4] = #20000 1'b1;
	funct[4] = #40000 1'b0;
	funct[4] = #60000 1'b1;
	funct[4] = #20000 1'b0;
	funct[4] = #40000 1'b1;
	funct[4] = #80000 1'b0;
	funct[4] = #20000 1'b1;
end 
// funct[ 3 ]
initial
begin
	funct[3] = 1'b1;
	funct[3] = #40000 1'b0;
	funct[3] = #20000 1'b1;
	funct[3] = #40000 1'b0;
	funct[3] = #100000 1'b1;
	funct[3] = #20000 1'b0;
	funct[3] = #20000 1'b1;
	funct[3] = #20000 1'b0;
	funct[3] = #40000 1'b1;
	funct[3] = #40000 1'b0;
	funct[3] = #40000 1'b1;
	funct[3] = #20000 1'b0;
	funct[3] = #60000 1'b1;
	funct[3] = #40000 1'b0;
	funct[3] = #20000 1'b1;
	funct[3] = #40000 1'b0;
	funct[3] = #40000 1'b1;
	funct[3] = #60000 1'b0;
	funct[3] = #20000 1'b1;
	funct[3] = #60000 1'b0;
	funct[3] = #20000 1'b1;
	funct[3] = #20000 1'b0;
	funct[3] = #20000 1'b1;
	funct[3] = #20000 1'b0;
	funct[3] = #40000 1'b1;
	funct[3] = #40000 1'b0;
	funct[3] = #40000 1'b1;
	funct[3] = #20000 1'b0;
	funct[3] = #20000 1'b1;
end 
// funct[ 2 ]
initial
begin
	funct[2] = 1'b0;
	funct[2] = #60000 1'b1;
	funct[2] = #20000 1'b0;
	funct[2] = #40000 1'b1;
	funct[2] = #60000 1'b0;
	funct[2] = #40000 1'b1;
	funct[2] = #20000 1'b0;
	funct[2] = #60000 1'b1;
	funct[2] = #20000 1'b0;
	funct[2] = #20000 1'b1;
	funct[2] = #40000 1'b0;
	funct[2] = #40000 1'b1;
	funct[2] = #20000 1'b0;
	funct[2] = #20000 1'b1;
	funct[2] = #120000 1'b0;
	funct[2] = #20000 1'b1;
	funct[2] = #120000 1'b0;
	funct[2] = #40000 1'b1;
	funct[2] = #40000 1'b0;
	funct[2] = #20000 1'b1;
	funct[2] = #40000 1'b0;
	funct[2] = #80000 1'b1;
end 
// funct[ 1 ]
initial
begin
	funct[1] = 1'b0;
	funct[1] = #40000 1'b1;
	funct[1] = #20000 1'b0;
	funct[1] = #20000 1'b1;
	funct[1] = #40000 1'b0;
	funct[1] = #60000 1'b1;
	funct[1] = #20000 1'b0;
	funct[1] = #40000 1'b1;
	funct[1] = #20000 1'b0;
	funct[1] = #20000 1'b1;
	funct[1] = #20000 1'b0;
	funct[1] = #120000 1'b1;
	funct[1] = #20000 1'b0;
	funct[1] = #40000 1'b1;
	funct[1] = #60000 1'b0;
	funct[1] = #40000 1'b1;
	funct[1] = #20000 1'b0;
	funct[1] = #40000 1'b1;
	funct[1] = #40000 1'b0;
	funct[1] = #20000 1'b1;
	funct[1] = #40000 1'b0;
	funct[1] = #20000 1'b1;
	funct[1] = #20000 1'b0;
	funct[1] = #20000 1'b1;
	funct[1] = #40000 1'b0;
	funct[1] = #40000 1'b1;
	funct[1] = #40000 1'b0;
	funct[1] = #20000 1'b1;
end 
// funct[ 0 ]
initial
begin
	funct[0] = 1'b0;
	funct[0] = #20000 1'b1;
	funct[0] = #40000 1'b0;
	funct[0] = #20000 1'b1;
	funct[0] = #60000 1'b0;
	funct[0] = #20000 1'b1;
	funct[0] = #20000 1'b0;
	funct[0] = #20000 1'b1;
	funct[0] = #160000 1'b0;
	funct[0] = #60000 1'b1;
	funct[0] = #20000 1'b0;
	funct[0] = #40000 1'b1;
	funct[0] = #20000 1'b0;
	funct[0] = #40000 1'b1;
	funct[0] = #20000 1'b0;
	funct[0] = #20000 1'b1;
	funct[0] = #120000 1'b0;
	funct[0] = #20000 1'b1;
	funct[0] = #40000 1'b0;
	funct[0] = #20000 1'b1;
	funct[0] = #20000 1'b0;
	funct[0] = #140000 1'b1;
	funct[0] = #40000 1'b0;
end 
// shift_type[ 1 ]
initial
begin
	shift_type[1] = 1'b1;
	shift_type[1] = #40000 1'b0;
	shift_type[1] = #60000 1'b1;
	shift_type[1] = #120000 1'b0;
	shift_type[1] = #60000 1'b1;
	shift_type[1] = #60000 1'b0;
	shift_type[1] = #40000 1'b1;
	shift_type[1] = #20000 1'b0;
	shift_type[1] = #40000 1'b1;
	shift_type[1] = #40000 1'b0;
	shift_type[1] = #20000 1'b1;
	shift_type[1] = #20000 1'b0;
	shift_type[1] = #20000 1'b1;
	shift_type[1] = #20000 1'b0;
	shift_type[1] = #40000 1'b1;
	shift_type[1] = #220000 1'b0;
	shift_type[1] = #20000 1'b1;
	shift_type[1] = #20000 1'b0;
	shift_type[1] = #20000 1'b1;
	shift_type[1] = #40000 1'b0;
	shift_type[1] = #20000 1'b1;
	shift_type[1] = #40000 1'b0;
end 
// shift_type[ 0 ]
initial
begin
	shift_type[0] = 1'b1;
	shift_type[0] = #20000 1'b0;
	shift_type[0] = #60000 1'b1;
	shift_type[0] = #40000 1'b0;
	shift_type[0] = #40000 1'b1;
	shift_type[0] = #40000 1'b0;
	shift_type[0] = #40000 1'b1;
	shift_type[0] = #60000 1'b0;
	shift_type[0] = #20000 1'b1;
	shift_type[0] = #80000 1'b0;
	shift_type[0] = #80000 1'b1;
	shift_type[0] = #120000 1'b0;
	shift_type[0] = #40000 1'b1;
	shift_type[0] = #40000 1'b0;
	shift_type[0] = #80000 1'b1;
	shift_type[0] = #60000 1'b0;
	shift_type[0] = #40000 1'b1;
	shift_type[0] = #20000 1'b0;
	shift_type[0] = #20000 1'b1;
	shift_type[0] = #80000 1'b0;
end 
// FLAG_OUT[ 31 ]
initial
begin
	FLAG_OUT[31] = 1'b0;
end 
// FLAG_OUT[ 30 ]
initial
begin
	FLAG_OUT[30] = 1'b0;
end 
// FLAG_OUT[ 29 ]
initial
begin
	FLAG_OUT[29] = 1'b0;
end 
// FLAG_OUT[ 28 ]
initial
begin
	FLAG_OUT[28] = 1'b0;
end 
// FLAG_OUT[ 27 ]
initial
begin
	FLAG_OUT[27] = 1'b0;
end 
// FLAG_OUT[ 26 ]
initial
begin
	FLAG_OUT[26] = 1'b0;
end 
// FLAG_OUT[ 25 ]
initial
begin
	FLAG_OUT[25] = 1'b0;
end 
// FLAG_OUT[ 24 ]
initial
begin
	FLAG_OUT[24] = 1'b0;
end 
// FLAG_OUT[ 23 ]
initial
begin
	FLAG_OUT[23] = 1'b0;
end 
// FLAG_OUT[ 22 ]
initial
begin
	FLAG_OUT[22] = 1'b0;
end 
// FLAG_OUT[ 21 ]
initial
begin
	FLAG_OUT[21] = 1'b0;
end 
// FLAG_OUT[ 20 ]
initial
begin
	FLAG_OUT[20] = 1'b0;
end 
// FLAG_OUT[ 19 ]
initial
begin
	FLAG_OUT[19] = 1'b0;
end 
// FLAG_OUT[ 18 ]
initial
begin
	FLAG_OUT[18] = 1'b0;
end 
// FLAG_OUT[ 17 ]
initial
begin
	FLAG_OUT[17] = 1'b0;
end 
// FLAG_OUT[ 16 ]
initial
begin
	FLAG_OUT[16] = 1'b0;
end 
// FLAG_OUT[ 15 ]
initial
begin
	FLAG_OUT[15] = 1'b0;
end 
// FLAG_OUT[ 14 ]
initial
begin
	FLAG_OUT[14] = 1'b0;
end 
// FLAG_OUT[ 13 ]
initial
begin
	FLAG_OUT[13] = 1'b0;
end 
// FLAG_OUT[ 12 ]
initial
begin
	FLAG_OUT[12] = 1'b0;
end 
// FLAG_OUT[ 11 ]
initial
begin
	FLAG_OUT[11] = 1'b0;
end 
// FLAG_OUT[ 10 ]
initial
begin
	FLAG_OUT[10] = 1'b0;
end 
// FLAG_OUT[ 9 ]
initial
begin
	FLAG_OUT[9] = 1'b0;
end 
// FLAG_OUT[ 8 ]
initial
begin
	FLAG_OUT[8] = 1'b0;
end 
// FLAG_OUT[ 7 ]
initial
begin
	FLAG_OUT[7] = 1'b0;
end 
// FLAG_OUT[ 6 ]
initial
begin
	FLAG_OUT[6] = 1'b0;
end 
// FLAG_OUT[ 5 ]
initial
begin
	FLAG_OUT[5] = 1'b0;
end 
// FLAG_OUT[ 4 ]
initial
begin
	FLAG_OUT[4] = 1'b0;
end 
// FLAG_OUT[ 3 ]
initial
begin
	FLAG_OUT[3] = 1'b0;
end 
// FLAG_OUT[ 2 ]
initial
begin
	FLAG_OUT[2] = 1'b0;
end 
// FLAG_OUT[ 1 ]
initial
begin
	FLAG_OUT[1] = 1'b0;
end 
// FLAG_OUT[ 0 ]
initial
begin
	FLAG_OUT[0] = 1'b0;
end 
endmodule


// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/08/2022 04:09:35"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          register_file
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module register_file_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A_1;
reg [3:0] A_2;
reg [3:0] A_3;
reg [31:0] R15;
reg [31:0] WD3;
reg clk;
reg wen;
// wires                                               
wire [31:0] RD1;
wire [31:0] RD2;

// assign statements (if any)                          
register_file i1 (
// port map - connection between master ports and signals/registers   
	.A_1(A_1),
	.A_2(A_2),
	.A_3(A_3),
	.R15(R15),
	.RD1(RD1),
	.RD2(RD2),
	.WD3(WD3),
	.clk(clk),
	.wen(wen)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 

// wen
initial
begin
	wen = 1'b1;
	wen = #500000 1'b0;
end 
// WD3[ 31 ]
initial
begin
	WD3[31] = 1'b0;
	WD3[31] = #200000 1'b1;
	WD3[31] = #200000 1'b0;
	WD3[31] = #200000 1'b1;
	WD3[31] = #100000 1'b0;
	WD3[31] = #100000 1'b1;
	WD3[31] = #100000 1'b0;
end 
// WD3[ 30 ]
initial
begin
	WD3[30] = 1'b1;
	WD3[30] = #500000 1'b0;
	WD3[30] = #400000 1'b1;
end 
// WD3[ 29 ]
initial
begin
	WD3[29] = 1'b1;
	WD3[29] = #100000 1'b0;
	WD3[29] = #100000 1'b1;
	WD3[29] = #200000 1'b0;
	WD3[29] = #100000 1'b1;
	WD3[29] = #100000 1'b0;
	WD3[29] = #100000 1'b1;
	WD3[29] = #200000 1'b0;
end 
// WD3[ 28 ]
initial
begin
	WD3[28] = 1'b0;
	WD3[28] = #700000 1'b1;
end 
// WD3[ 27 ]
initial
begin
	WD3[27] = 1'b1;
	WD3[27] = #300000 1'b0;
	WD3[27] = #400000 1'b1;
end 
// WD3[ 26 ]
initial
begin
	WD3[26] = 1'b0;
	WD3[26] = #500000 1'b1;
	WD3[26] = #100000 1'b0;
	WD3[26] = #200000 1'b1;
end 
// WD3[ 25 ]
initial
begin
	WD3[25] = 1'b1;
	WD3[25] = #100000 1'b0;
	WD3[25] = #100000 1'b1;
	WD3[25] = #200000 1'b0;
	WD3[25] = #100000 1'b1;
	WD3[25] = #100000 1'b0;
end 
// WD3[ 24 ]
initial
begin
	WD3[24] = 1'b1;
	WD3[24] = #600000 1'b0;
	WD3[24] = #100000 1'b1;
	WD3[24] = #100000 1'b0;
	WD3[24] = #100000 1'b1;
end 
// WD3[ 23 ]
initial
begin
	WD3[23] = 1'b0;
	WD3[23] = #700000 1'b1;
	WD3[23] = #200000 1'b0;
end 
// WD3[ 22 ]
initial
begin
	WD3[22] = 1'b1;
	WD3[22] = #100000 1'b0;
	WD3[22] = #100000 1'b1;
	WD3[22] = #300000 1'b0;
	WD3[22] = #200000 1'b1;
	WD3[22] = #100000 1'b0;
	WD3[22] = #100000 1'b1;
end 
// WD3[ 21 ]
initial
begin
	WD3[21] = 1'b0;
	WD3[21] = #300000 1'b1;
	WD3[21] = #100000 1'b0;
	WD3[21] = #300000 1'b1;
end 
// WD3[ 20 ]
initial
begin
	WD3[20] = 1'b0;
	WD3[20] = #100000 1'b1;
	WD3[20] = #100000 1'b0;
	WD3[20] = #100000 1'b1;
	WD3[20] = #200000 1'b0;
	WD3[20] = #100000 1'b1;
	WD3[20] = #100000 1'b0;
	WD3[20] = #100000 1'b1;
	WD3[20] = #100000 1'b0;
end 
// WD3[ 19 ]
initial
begin
	WD3[19] = 1'b1;
	WD3[19] = #200000 1'b0;
	WD3[19] = #100000 1'b1;
	WD3[19] = #300000 1'b0;
end 
// WD3[ 18 ]
initial
begin
	WD3[18] = 1'b0;
	WD3[18] = #100000 1'b1;
	WD3[18] = #100000 1'b0;
	WD3[18] = #100000 1'b1;
	WD3[18] = #100000 1'b0;
	WD3[18] = #100000 1'b1;
	WD3[18] = #100000 1'b0;
	WD3[18] = #100000 1'b1;
	WD3[18] = #100000 1'b0;
	WD3[18] = #100000 1'b1;
end 
// WD3[ 17 ]
initial
begin
	WD3[17] = 1'b1;
	WD3[17] = #200000 1'b0;
	WD3[17] = #100000 1'b1;
	WD3[17] = #200000 1'b0;
	WD3[17] = #200000 1'b1;
	WD3[17] = #200000 1'b0;
end 
// WD3[ 16 ]
initial
begin
	WD3[16] = 1'b0;
	WD3[16] = #100000 1'b1;
	WD3[16] = #100000 1'b0;
	WD3[16] = #400000 1'b1;
	WD3[16] = #100000 1'b0;
end 
// WD3[ 15 ]
initial
begin
	WD3[15] = 1'b0;
	WD3[15] = #200000 1'b1;
	WD3[15] = #100000 1'b0;
	WD3[15] = #200000 1'b1;
	WD3[15] = #400000 1'b0;
end 
// WD3[ 14 ]
initial
begin
	WD3[14] = 1'b0;
	WD3[14] = #400000 1'b1;
	WD3[14] = #100000 1'b0;
	WD3[14] = #300000 1'b1;
end 
// WD3[ 13 ]
initial
begin
	WD3[13] = 1'b0;
	WD3[13] = #100000 1'b1;
	WD3[13] = #100000 1'b0;
	WD3[13] = #100000 1'b1;
	WD3[13] = #100000 1'b0;
	WD3[13] = #400000 1'b1;
end 
// WD3[ 12 ]
initial
begin
	WD3[12] = 1'b0;
	WD3[12] = #200000 1'b1;
	WD3[12] = #300000 1'b0;
	WD3[12] = #100000 1'b1;
	WD3[12] = #200000 1'b0;
	WD3[12] = #100000 1'b1;
end 
// WD3[ 11 ]
initial
begin
	WD3[11] = 1'b1;
	WD3[11] = #100000 1'b0;
	WD3[11] = #200000 1'b1;
	WD3[11] = #100000 1'b0;
	WD3[11] = #400000 1'b1;
end 
// WD3[ 10 ]
initial
begin
	WD3[10] = 1'b0;
	WD3[10] = #100000 1'b1;
	WD3[10] = #100000 1'b0;
	WD3[10] = #100000 1'b1;
	WD3[10] = #100000 1'b0;
	WD3[10] = #100000 1'b1;
	WD3[10] = #400000 1'b0;
end 
// WD3[ 9 ]
initial
begin
	WD3[9] = 1'b0;
	WD3[9] = #100000 1'b1;
	WD3[9] = #200000 1'b0;
	WD3[9] = #100000 1'b1;
	WD3[9] = #200000 1'b0;
end 
// WD3[ 8 ]
initial
begin
	WD3[8] = 1'b1;
	WD3[8] = #200000 1'b0;
	WD3[8] = #100000 1'b1;
	WD3[8] = #100000 1'b0;
	WD3[8] = #300000 1'b1;
	WD3[8] = #100000 1'b0;
end 
// WD3[ 7 ]
initial
begin
	WD3[7] = 1'b1;
	WD3[7] = #200000 1'b0;
	WD3[7] = #100000 1'b1;
	WD3[7] = #100000 1'b0;
	WD3[7] = #200000 1'b1;
	WD3[7] = #200000 1'b0;
	WD3[7] = #100000 1'b1;
end 
// WD3[ 6 ]
initial
begin
	WD3[6] = 1'b1;
	WD3[6] = #100000 1'b0;
	WD3[6] = #100000 1'b1;
	WD3[6] = #200000 1'b0;
	WD3[6] = #400000 1'b1;
end 
// WD3[ 5 ]
initial
begin
	WD3[5] = 1'b1;
	WD3[5] = #100000 1'b0;
	WD3[5] = #100000 1'b1;
	WD3[5] = #600000 1'b0;
end 
// WD3[ 4 ]
initial
begin
	WD3[4] = 1'b0;
	WD3[4] = #100000 1'b1;
	WD3[4] = #100000 1'b0;
	WD3[4] = #100000 1'b1;
	WD3[4] = #200000 1'b0;
	WD3[4] = #200000 1'b1;
end 
// WD3[ 3 ]
initial
begin
	WD3[3] = 1'b0;
	WD3[3] = #200000 1'b1;
	WD3[3] = #100000 1'b0;
	WD3[3] = #200000 1'b1;
	WD3[3] = #200000 1'b0;
	WD3[3] = #200000 1'b1;
end 
// WD3[ 2 ]
initial
begin
	WD3[2] = 1'b1;
	WD3[2] = #100000 1'b0;
	WD3[2] = #100000 1'b1;
	WD3[2] = #300000 1'b0;
	WD3[2] = #200000 1'b1;
	WD3[2] = #100000 1'b0;
	WD3[2] = #100000 1'b1;
end 
// WD3[ 1 ]
initial
begin
	WD3[1] = 1'b1;
	WD3[1] = #400000 1'b0;
	WD3[1] = #100000 1'b1;
	WD3[1] = #100000 1'b0;
	WD3[1] = #100000 1'b1;
	WD3[1] = #200000 1'b0;
end 
// WD3[ 0 ]
initial
begin
	WD3[0] = 1'b0;
	WD3[0] = #100000 1'b1;
	WD3[0] = #500000 1'b0;
	WD3[0] = #100000 1'b1;
	WD3[0] = #200000 1'b0;
end 
// A_1[ 3 ]
initial
begin
	A_1[3] = 1'b0;
end 
// A_1[ 2 ]
initial
begin
	A_1[2] = 1'b0;
	A_1[2] = #900000 1'b1;
end 
// A_1[ 1 ]
initial
begin
	A_1[1] = 1'b0;
	A_1[1] = #700000 1'b1;
	A_1[1] = #200000 1'b0;
end 
// A_1[ 0 ]
initial
begin
	A_1[0] = 1'b0;
	# 600000;
	repeat(2)
	begin
		A_1[0] = 1'b1;
		A_1[0] = #100000 1'b0;
		# 100000;
	end
end 
// A_2[ 3 ]
initial
begin
	A_2[3] = 1'b0;
end 
// A_2[ 2 ]
initial
begin
	A_2[2] = 1'b0;
end 
// A_2[ 1 ]
initial
begin
	A_2[1] = 1'b0;
end 
// A_2[ 0 ]
initial
begin
	A_2[0] = 1'b0;
end 
// A_3[ 3 ]
initial
begin
	A_3[3] = 1'b0;
end 
// A_3[ 2 ]
initial
begin
	A_3[2] = 1'b0;
	A_3[2] = #400000 1'b1;
	A_3[2] = #100000 1'b0;
	A_3[2] = #400000 1'b1;
end 
// A_3[ 1 ]
initial
begin
	A_3[1] = 1'b0;
	A_3[1] = #200000 1'b1;
	A_3[1] = #200000 1'b0;
	A_3[1] = #300000 1'b1;
	A_3[1] = #200000 1'b0;
end 
// A_3[ 0 ]
initial
begin
	repeat(2)
	begin
		A_3[0] = 1'b0;
		A_3[0] = #100000 1'b1;
		# 100000;
	end
	A_3[0] = 1'b0;
	A_3[0] = #200000 1'b1;
	A_3[0] = #100000 1'b0;
	A_3[0] = #100000 1'b1;
	A_3[0] = #100000 1'b0;
end 
// R15[ 31 ]
initial
begin
	R15[31] = 1'b0;
end 
// R15[ 30 ]
initial
begin
	R15[30] = 1'b0;
end 
// R15[ 29 ]
initial
begin
	R15[29] = 1'b0;
end 
// R15[ 28 ]
initial
begin
	R15[28] = 1'b0;
end 
// R15[ 27 ]
initial
begin
	R15[27] = 1'b0;
end 
// R15[ 26 ]
initial
begin
	R15[26] = 1'b0;
end 
// R15[ 25 ]
initial
begin
	R15[25] = 1'b0;
end 
// R15[ 24 ]
initial
begin
	R15[24] = 1'b0;
end 
// R15[ 23 ]
initial
begin
	R15[23] = 1'b0;
end 
// R15[ 22 ]
initial
begin
	R15[22] = 1'b0;
end 
// R15[ 21 ]
initial
begin
	R15[21] = 1'b0;
end 
// R15[ 20 ]
initial
begin
	R15[20] = 1'b0;
end 
// R15[ 19 ]
initial
begin
	R15[19] = 1'b0;
end 
// R15[ 18 ]
initial
begin
	R15[18] = 1'b0;
end 
// R15[ 17 ]
initial
begin
	R15[17] = 1'b0;
end 
// R15[ 16 ]
initial
begin
	R15[16] = 1'b0;
end 
// R15[ 15 ]
initial
begin
	R15[15] = 1'b0;
end 
// R15[ 14 ]
initial
begin
	R15[14] = 1'b0;
end 
// R15[ 13 ]
initial
begin
	R15[13] = 1'b0;
end 
// R15[ 12 ]
initial
begin
	R15[12] = 1'b0;
end 
// R15[ 11 ]
initial
begin
	R15[11] = 1'b0;
end 
// R15[ 10 ]
initial
begin
	R15[10] = 1'b0;
end 
// R15[ 9 ]
initial
begin
	R15[9] = 1'b0;
end 
// R15[ 8 ]
initial
begin
	R15[8] = 1'b0;
end 
// R15[ 7 ]
initial
begin
	R15[7] = 1'b0;
end 
// R15[ 6 ]
initial
begin
	R15[6] = 1'b0;
end 
// R15[ 5 ]
initial
begin
	R15[5] = 1'b0;
end 
// R15[ 4 ]
initial
begin
	R15[4] = 1'b0;
end 
// R15[ 3 ]
initial
begin
	R15[3] = 1'b0;
end 
// R15[ 2 ]
initial
begin
	R15[2] = 1'b0;
end 
// R15[ 1 ]
initial
begin
	R15[1] = 1'b0;
end 
// R15[ 0 ]
initial
begin
	R15[0] = 1'b0;
end 
endmodule


// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/08/2022 17:25:00"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          immediate_extender
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module immediate_extender_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] imm_src;
reg [11:0] immediate_input;
// wires                                               
wire [31:0] immediate_output;

// assign statements (if any)                          
immediate_extender i1 (
// port map - connection between master ports and signals/registers   
	.imm_src(imm_src),
	.immediate_input(immediate_input),
	.immediate_output(immediate_output)
);
initial 
begin 
#1000000 $finish;
end 
// imm_src[ 1 ]
initial
begin
	imm_src[1] = 1'b0;
	imm_src[1] = #300000 1'b1;
	imm_src[1] = #300000 1'b0;
	imm_src[1] = #300000 1'b1;
end 
// imm_src[ 0 ]
initial
begin
	repeat(3)
	begin
		imm_src[0] = 1'b0;
		imm_src[0] = #150000 1'b1;
		# 150000;
	end
	imm_src[0] = 1'b0;
end 
// immediate_input[ 11 ]
initial
begin
	immediate_input[11] = 1'b1;
	immediate_input[11] = #450000 1'b0;
end 
// immediate_input[ 10 ]
initial
begin
	immediate_input[10] = 1'b0;
	immediate_input[10] = #450000 1'b1;
	immediate_input[10] = #300000 1'b0;
end 
// immediate_input[ 9 ]
initial
begin
	immediate_input[9] = 1'b0;
	immediate_input[9] = #300000 1'b1;
	immediate_input[9] = #150000 1'b0;
	immediate_input[9] = #150000 1'b1;
	immediate_input[9] = #150000 1'b0;
end 
// immediate_input[ 8 ]
initial
begin
	immediate_input[8] = 1'b1;
	immediate_input[8] = #300000 1'b0;
	immediate_input[8] = #150000 1'b1;
	immediate_input[8] = #450000 1'b0;
end 
// immediate_input[ 7 ]
initial
begin
	immediate_input[7] = 1'b1;
	immediate_input[7] = #150000 1'b0;
	immediate_input[7] = #600000 1'b1;
	immediate_input[7] = #150000 1'b0;
end 
// immediate_input[ 6 ]
initial
begin
	immediate_input[6] = 1'b1;
	immediate_input[6] = #150000 1'b0;
	immediate_input[6] = #150000 1'b1;
	immediate_input[6] = #300000 1'b0;
	immediate_input[6] = #150000 1'b1;
end 
// immediate_input[ 5 ]
initial
begin
	immediate_input[5] = 1'b0;
	immediate_input[5] = #150000 1'b1;
	immediate_input[5] = #300000 1'b0;
	immediate_input[5] = #150000 1'b1;
	immediate_input[5] = #150000 1'b0;
end 
// immediate_input[ 4 ]
initial
begin
	immediate_input[4] = 1'b0;
end 
// immediate_input[ 3 ]
initial
begin
	immediate_input[3] = 1'b1;
	immediate_input[3] = #150000 1'b0;
	immediate_input[3] = #150000 1'b1;
	immediate_input[3] = #300000 1'b0;
	immediate_input[3] = #150000 1'b1;
end 
// immediate_input[ 2 ]
initial
begin
	immediate_input[2] = 1'b1;
	immediate_input[2] = #900000 1'b0;
end 
// immediate_input[ 1 ]
initial
begin
	immediate_input[1] = 1'b0;
	immediate_input[1] = #450000 1'b1;
	immediate_input[1] = #300000 1'b0;
	immediate_input[1] = #150000 1'b1;
end 
// immediate_input[ 0 ]
initial
begin
	immediate_input[0] = 1'b1;
	immediate_input[0] = #150000 1'b0;
	immediate_input[0] = #300000 1'b1;
	immediate_input[0] = #150000 1'b0;
	immediate_input[0] = #150000 1'b1;
	immediate_input[0] = #150000 1'b0;
end 
endmodule


// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/08/2022 15:06:01"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          single_cycle_computer_controller
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module single_cycle_computer_controller_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg [31:0] FLAG_OUT;
reg [5:0] funct;
reg [1:0] op;
reg [1:0] shift_type;
// wires                                               
wire ALUShiftSelect;
wire ALUSrc;
wire [2:0] ALUop;
wire ExtControl;
wire MemWrite;
wire MemtoReg;
wire RegSrc;
wire RegWrite;
wire [1:0] ShiftSel;
wire flagUpdate;

// assign statements (if any)                          
single_cycle_computer_controller i1 (
// port map - connection between master ports and signals/registers   
	.ALUShiftSelect(ALUShiftSelect),
	.ALUSrc(ALUSrc),
	.ALUop(ALUop),
	.Clock(Clock),
	.ExtControl(ExtControl),
	.FLAG_OUT(FLAG_OUT),
	.MemWrite(MemWrite),
	.MemtoReg(MemtoReg),
	.RegSrc(RegSrc),
	.RegWrite(RegWrite),
	.ShiftSel(ShiftSel),
	.flagUpdate(flagUpdate),
	.funct(funct),
	.op(op),
	.shift_type(shift_type)
);
initial 
begin 
#1000000 $finish;
end 

// Clock
initial
begin
	repeat(3)
	begin
		Clock = 1'b0;
		Clock = #150000 1'b1;
		# 150000;
	end
	Clock = 1'b0;
end 
endmodule


module memory_128x32bit(
	data_out, 
	data_in, 
	address_in, 
	we, 
	clk 
); 
	output reg [31:0] data_out; // input and output should have 32-bit length. 	
	input [31:0] data_in; 
	input [6:0] address_in; 
	input we; 
	input clk; 

	reg [7:0] mem[127:0]; // create 128 32-bit memory. 
	
	always @(posedge clk) begin 
		if (we) begin 
			mem[address_in] <= data_in[7:0]; // if write enable is high, write to the memory.
			mem[address_in+1] <= data_in[15:8];
			mem[address_in+2] <= data_in[23:16];
			mem[address_in+3] <= data_in[31:24];
		end 
		data_out[7:0] <= mem[address_in];
		data_out[15:8] <= mem[address_in+1];
		data_out[23:16] <= mem[address_in+2];
		data_out[31:24] <= mem[address_in+3];
	end 

endmodule 